!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var r=t();for(var n in r)("object"==typeof exports?exports:e)[n]=r[n]}}(window,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=122)}({0:function(e,t,r){"use strict";e.exports=r(10)},10:function(e,t,r){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n=r(5),o="function"==typeof Symbol&&Symbol.for,u=o?Symbol.for("react.element"):60103,c=o?Symbol.for("react.portal"):60106,i=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,a=o?Symbol.for("react.profiler"):60114,f=o?Symbol.for("react.provider"):60109,s=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.forward_ref"):60112,y=o?Symbol.for("react.suspense"):60113,d=o?Symbol.for("react.memo"):60115,v=o?Symbol.for("react.lazy"):60116,h="function"==typeof Symbol&&Symbol.iterator;function m(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function w(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||b}function S(){}function O(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||b}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(m(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},S.prototype=w.prototype;var k=O.prototype=new S;k.constructor=O,n(k,w.prototype),k.isPureReactComponent=!0;var j={current:null},_=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,r){var n,o={},c=null,i=null;if(null!=t)for(n in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(c=""+t.key),t)_.call(t,n)&&!E.hasOwnProperty(n)&&(o[n]=t[n]);var l=arguments.length-2;if(1===l)o.children=r;else if(1<l){for(var a=Array(l),f=0;f<l;f++)a[f]=arguments[f+2];o.children=a}if(e&&e.defaultProps)for(n in l=e.defaultProps)void 0===o[n]&&(o[n]=l[n]);return{$$typeof:u,type:e,key:c,ref:i,props:o,_owner:j.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var P=/\/+/g,I=[];function L(e,t,r,n){if(I.length){var o=I.pop();return o.result=e,o.keyPrefix=t,o.func=r,o.context=n,o.count=0,o}return{result:e,keyPrefix:t,func:r,context:n,count:0}}function T(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>I.length&&I.push(e)}function $(e,t,r){return null==e?0:function e(t,r,n,o){var i=typeof t;"undefined"!==i&&"boolean"!==i||(t=null);var l=!1;if(null===t)l=!0;else switch(i){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case u:case c:l=!0}}if(l)return n(o,t,""===r?"."+N(t,0):r),1;if(l=0,r=""===r?".":r+":",Array.isArray(t))for(var a=0;a<t.length;a++){var f=r+N(i=t[a],a);l+=e(i,f,n,o)}else if(null===t||"object"!=typeof t?f=null:f="function"==typeof(f=h&&t[h]||t["@@iterator"])?f:null,"function"==typeof f)for(t=f.call(t),a=0;!(i=t.next()).done;)l+=e(i=i.value,f=r+N(i,a++),n,o);else if("object"===i)throw n=""+t,Error(m(31,"[object Object]"===n?"object with keys {"+Object.keys(t).join(", ")+"}":n,""));return l}(e,"",t,r)}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function R(e,t){e.func.call(e.context,t,e.count++)}function D(e,t,r){var n=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?q(e,n,r,(function(e){return e})):null!=e&&(C(e)&&(e=function(e,t){return{$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+r)),n.push(e))}function q(e,t,r,n,o){var u="";null!=r&&(u=(""+r).replace(P,"$&/")+"/"),$(e,D,t=L(t,u,n,o)),T(t)}var A={current:null};function B(){var e=A.current;if(null===e)throw Error(m(321));return e}var M={ReactCurrentDispatcher:A,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:j,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:function(e,t,r){if(null==e)return e;var n=[];return q(e,n,null,t,r),n},forEach:function(e,t,r){if(null==e)return e;$(e,R,t=L(null,null,t,r)),T(t)},count:function(e){return $(e,(function(){return null}),null)},toArray:function(e){var t=[];return q(e,t,null,(function(e){return e})),t},only:function(e){if(!C(e))throw Error(m(143));return e}},t.Component=w,t.Fragment=i,t.Profiler=a,t.PureComponent=O,t.StrictMode=l,t.Suspense=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,r){if(null==e)throw Error(m(267,e));var o=n({},e.props),c=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=j.current),void 0!==t.key&&(c=""+t.key),e.type&&e.type.defaultProps)var a=e.type.defaultProps;for(f in t)_.call(t,f)&&!E.hasOwnProperty(f)&&(o[f]=void 0===t[f]&&void 0!==a?a[f]:t[f])}var f=arguments.length-2;if(1===f)o.children=r;else if(1<f){a=Array(f);for(var s=0;s<f;s++)a[s]=arguments[s+2];o.children=a}return{$$typeof:u,type:e.type,key:c,ref:i,props:o,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:f,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:p,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return B().useCallback(e,t)},t.useContext=function(e,t){return B().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return B().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return B().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return B().useLayoutEffect(e,t)},t.useMemo=function(e,t){return B().useMemo(e,t)},t.useReducer=function(e,t,r){return B().useReducer(e,t,r)},t.useRef=function(e){return B().useRef(e)},t.useState=function(e){return B().useState(e)},t.version="16.13.1"},122:function(e,t,r){e.exports=r(8)},5:function(e,t,r){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var n=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;function c(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,i,l=c(e),a=1;a<arguments.length;a++){for(var f in r=Object(arguments[a]))o.call(r,f)&&(l[f]=r[f]);if(n){i=n(r);for(var s=0;s<i.length;s++)u.call(r,i[s])&&(l[i[s]]=r[i[s]])}}return l}},8:function(e,t,r){"use strict";r.r(t);var n=r(0),o=r.n(n);function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var f=function(e){function t(e){var r,n,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,(r=!(o=i(t).call(this,e))||"object"!==u(o)&&"function"!=typeof o?a(n):o).props=e,r.scrollTargetIds=r.props.scrollTargetIds,r.activeNavClass=r.props.activeNavClass,r.scrollDuration=Number(r.props.scrollDuration)||1e3,r.headerBackground="true"===r.props.headerBackground,r.offset=r.props.offset||0,r.onScroll=r.onScroll.bind(a(a(r))),r.props.router&&"HashRouter"===r.props.router?(r.homeDefaultLink="#/",r.hashIdentifier="#/#"):(r.homeDefaultLink="/",r.hashIdentifier="#"),r}var r,n,f;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,e),r=t,(n=[{key:"onScroll",value:function(){var e,t=this;this.scrollTargetIds.forEach((function(r,n){document.getElementById(r)?(e=document.getElementById(r).offsetTop-(t.headerBackground?document.querySelector("div[data-nav='list']").scrollHeight:0),window.pageYOffset-t.offset>=e&&window.pageYOffset<e+document.getElementById(r).scrollHeight?(t.getNavLinkElement(r).classList.add(t.activeNavClass),t.clearOtherNavLinkActiveStyle(r)):t.getNavLinkElement(r).classList.remove(t.activeNavClass),window.innerHeight+window.pageYOffset>=document.body.scrollHeight&&n===t.scrollTargetIds.length-1&&(t.getNavLinkElement(r).classList.add(t.activeNavClass),t.clearOtherNavLinkActiveStyle(r))):console.warn("".concat("react-scrollspy-nav",": no element with id ").concat(r," present in the DOM"))}))}},{key:"easeInOutQuad",value:function(e,t,r,n){return(e/=n/2)<1?r/2*e*e+t:-r/2*(--e*(e-2)-1)+t}},{key:"scrollTo",value:function(e,t,r){var n=this,o=t-e,u=0;!function t(){u+=10;var c=n.easeInOutQuad(u,e,o,r);window.scrollTo(0,c),u<r&&setTimeout(t,10)}()}},{key:"getNavLinkElement",value:function(e){return document.querySelector("a[href='".concat(this.hashIdentifier).concat(e,"']"))}},{key:"getNavToSectionID",value:function(e){return e.includes(this.hashIdentifier)?e.replace(this.hashIdentifier,""):""}},{key:"clearOtherNavLinkActiveStyle",value:function(e){var t=this;this.scrollTargetIds.map((function(r,n){r!==e&&t.getNavLinkElement(r).classList.remove(t.activeNavClass)}))}},{key:"componentDidMount",value:function(){var e=this;document.querySelector("a[href='".concat(this.homeDefaultLink,"#']"))&&document.querySelector("a[href='".concat(this.homeDefaultLink,"#']")).addEventListener("click",(function(t){t.preventDefault(),e.scrollTo(window.pageYOffset,0,e.scrollDuration),window.location.hash=""})),document.querySelector("div[data-nav='list']").querySelectorAll("a").forEach((function(t){t.addEventListener("click",(function(r){r.preventDefault();var n=e.getNavToSectionID(t.getAttribute("href"));if(n)if(document.getElementById(n)){var o=document.getElementById(n).offsetTop-(e.headerBackground?document.querySelector("div[data-nav='list']").scrollHeight:0);e.scrollTo(window.pageYOffset,o+e.offset,e.scrollDuration)}else console.warn("".concat("react-scrollspy-nav",": no element with id ").concat(n," present in the DOM"));else e.scrollTo(window.pageYOffset,0,e.scrollDuration)}))})),window.addEventListener("scroll",this.onScroll)}},{key:"componentWillUnmount",value:function(){window.removeEventListener("scroll",this.onScroll)}},{key:"render",value:function(){return o.a.createElement("div",{"data-nav":"list"},this.props.children)}}])&&c(r.prototype,n),f&&c(r,f),t}(n.Component);t.default=f}})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL1Njcm9sbHNweU5hdi5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJhIiwiaSIsIndpbmRvdyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImZvciIsInEiLCJ1IiwidiIsInciLCJ4IiwieSIsInoiLCJBIiwiQiIsIml0ZXJhdG9yIiwiQyIsImIiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJlbmNvZGVVUklDb21wb25lbnQiLCJEIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkUiLCJGIiwidGhpcyIsInByb3BzIiwiY29udGV4dCIsInJlZnMiLCJ1cGRhdGVyIiwiRyIsIkgiLCJpc1JlYWN0Q29tcG9uZW50Iiwic2V0U3RhdGUiLCJFcnJvciIsImZvcmNlVXBkYXRlIiwiSSIsImNvbnN0cnVjdG9yIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJKIiwiY3VycmVudCIsIksiLCJMIiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCJNIiwiZSIsImciLCJrIiwiZiIsImNoaWxkcmVuIiwiaCIsIkFycmF5IiwiZGVmYXVsdFByb3BzIiwiJCR0eXBlb2YiLCJ0eXBlIiwiX293bmVyIiwiTyIsIlAiLCJRIiwiUiIsInBvcCIsInJlc3VsdCIsImtleVByZWZpeCIsImZ1bmMiLCJjb3VudCIsIlMiLCJwdXNoIiwiViIsIlQiLCJVIiwiaXNBcnJheSIsIm5leHQiLCJkb25lIiwia2V5cyIsImpvaW4iLCJyZXBsYWNlIiwiZXNjYXBlIiwidG9TdHJpbmciLCJXIiwiYWEiLCJYIiwiTiIsIlkiLCJaIiwiYmEiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJzdXNwZW5zZSIsIlJlYWN0Q3VycmVudE93bmVyIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJhc3NpZ24iLCJDaGlsZHJlbiIsIm1hcCIsImZvckVhY2giLCJ0b0FycmF5Iiwib25seSIsIkNvbXBvbmVudCIsIkZyYWdtZW50IiwiUHJvZmlsZXIiLCJQdXJlQ29tcG9uZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiY3JlYXRlRWxlbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwicmVuZGVyIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsIm1lbW8iLCJjb21wYXJlIiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRGVidWdWYWx1ZSIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidmVyc2lvbiIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwidmFsIiwiVHlwZUVycm9yIiwidGVzdDEiLCJTdHJpbmciLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsInNwbGl0IiwibGV0dGVyIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwidGFyZ2V0Iiwic291cmNlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsIlNjcm9sbHNweU5hdiIsInNjcm9sbFRhcmdldElkcyIsImFjdGl2ZU5hdkNsYXNzIiwic2Nyb2xsRHVyYXRpb24iLCJOdW1iZXIiLCJoZWFkZXJCYWNrZ3JvdW5kIiwib2Zmc2V0Iiwib25TY3JvbGwiLCJyb3V0ZXIiLCJob21lRGVmYXVsdExpbmsiLCJoYXNoSWRlbnRpZmllciIsInNjcm9sbFNlY3Rpb25PZmZzZXRUb3AiLCJzZWN0aW9uSUQiLCJpbmRleCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJvZmZzZXRUb3AiLCJxdWVyeVNlbGVjdG9yIiwic2Nyb2xsSGVpZ2h0IiwicGFnZVlPZmZzZXQiLCJnZXROYXZMaW5rRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsImNsZWFyT3RoZXJOYXZMaW5rQWN0aXZlU3R5bGUiLCJyZW1vdmUiLCJpbm5lckhlaWdodCIsImJvZHkiLCJjb25zb2xlIiwid2FybiIsImN1cnJlbnRfdGltZSIsInN0YXJ0IiwiY2hhbmdlIiwiZHVyYXRpb24iLCJjdXJyZW50VGltZSIsImFuaW1hdGVTY3JvbGwiLCJlYXNlSW5PdXRRdWFkIiwic2Nyb2xsVG8iLCJzZXRUaW1lb3V0IiwibmF2SHJlZiIsImluY2x1ZGVzIiwiZXhjbHVkZVNlY3Rpb25JRCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwibG9jYXRpb24iLCJoYXNoIiwicXVlcnlTZWxlY3RvckFsbCIsIm5hdkxpbmsiLCJnZXROYXZUb1NlY3Rpb25JRCIsImdldEF0dHJpYnV0ZSIsInNjcm9sbFRhcmdldFBvc2l0aW9uIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRhdGEtbmF2Il0sIm1hcHBpbmdzIjoiQ0FBQSxTQUEyQ0EsRUFBTUMsR0FDaEQsR0FBc0IsaUJBQVpDLFNBQTBDLGlCQUFYQyxPQUN4Q0EsT0FBT0QsUUFBVUQsU0FDYixHQUFxQixtQkFBWEcsUUFBeUJBLE9BQU9DLElBQzlDRCxPQUFPLEdBQUlILE9BQ1AsQ0FDSixJQUFJSyxFQUFJTCxJQUNSLElBQUksSUFBSU0sS0FBS0QsR0FBdUIsaUJBQVpKLFFBQXVCQSxRQUFVRixHQUFNTyxHQUFLRCxFQUFFQyxJQVB4RSxDQVNHQyxRQUFRLFdBQ1gsTyxZQ1RFLElBQUlDLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVULFFBR25DLElBQUlDLEVBQVNNLEVBQWlCRSxHQUFZLENBQ3pDSixFQUFHSSxFQUNIQyxHQUFHLEVBQ0hWLFFBQVMsSUFVVixPQU5BVyxFQUFRRixHQUFVRyxLQUFLWCxFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTUSxHQUcvRFAsRUFBT1MsR0FBSSxFQUdKVCxFQUFPRCxRQTBEZixPQXJEQVEsRUFBb0JLLEVBQUlGLEVBR3hCSCxFQUFvQk0sRUFBSVAsRUFHeEJDLEVBQW9CTyxFQUFJLFNBQVNmLEVBQVNnQixFQUFNQyxHQUMzQ1QsRUFBb0JVLEVBQUVsQixFQUFTZ0IsSUFDbENHLE9BQU9DLGVBQWVwQixFQUFTZ0IsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFVCxFQUFvQmUsRUFBSSxTQUFTdkIsR0FDWCxvQkFBWHdCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZXBCLEVBQVN3QixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWVwQixFQUFTLGFBQWMsQ0FBRTBCLE9BQU8sS0FRdkRsQixFQUFvQm1CLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRbEIsRUFBb0JrQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQXZCLEVBQW9CZSxFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFBUEUsR0FBNEIsaUJBQVRGLEVBQW1CLElBQUksSUFBSU0sS0FBT04sRUFBT2xCLEVBQW9CTyxFQUFFZSxFQUFJRSxFQUFLLFNBQVNBLEdBQU8sT0FBT04sRUFBTU0sSUFBUUMsS0FBSyxLQUFNRCxJQUM5SSxPQUFPRixHQUlSdEIsRUFBb0IwQixFQUFJLFNBQVNqQyxHQUNoQyxJQUFJZ0IsRUFBU2hCLEdBQVVBLEVBQU80QixXQUM3QixXQUF3QixPQUFPNUIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQU8sRUFBb0JPLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJULEVBQW9CVSxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6RzVCLEVBQW9CK0IsRUFBSSxHQUlqQi9CLEVBQW9CQSxFQUFvQmdDLEVBQUksSyxpQ0MvRW5EdkMsRUFBT0QsUUFBVSxFQUFRLEs7Ozs7Ozs7O0dDTWQsSUFBSVUsRUFBRSxFQUFRLEdBQWlCd0IsRUFBRSxtQkFBb0JWLFFBQVFBLE9BQU9pQixJQUFJRixFQUFFTCxFQUFFVixPQUFPaUIsSUFBSSxpQkFBaUIsTUFBTUMsRUFBRVIsRUFBRVYsT0FBT2lCLElBQUksZ0JBQWdCLE1BQU1sQixFQUFFVyxFQUFFVixPQUFPaUIsSUFBSSxrQkFBa0IsTUFBTWQsRUFBRU8sRUFBRVYsT0FBT2lCLElBQUkscUJBQXFCLE1BQU1FLEVBQUVULEVBQUVWLE9BQU9pQixJQUFJLGtCQUFrQixNQUFNRyxFQUFFVixFQUFFVixPQUFPaUIsSUFBSSxrQkFBa0IsTUFBTUksRUFBRVgsRUFBRVYsT0FBT2lCLElBQUksaUJBQWlCLE1BQU1LLEVBQUVaLEVBQUVWLE9BQU9pQixJQUFJLHFCQUFxQixNQUFNTSxFQUFFYixFQUFFVixPQUFPaUIsSUFBSSxrQkFBa0IsTUFBTU8sRUFBRWQsRUFBRVYsT0FBT2lCLElBQUksY0FBYyxNQUFNUSxFQUFFZixFQUFFVixPQUFPaUIsSUFBSSxjQUN4ZSxNQUFNUyxFQUFFLG1CQUFvQjFCLFFBQVFBLE9BQU8yQixTQUFTLFNBQVNDLEVBQUVoRCxHQUFHLElBQUksSUFBSWlELEVBQUUseURBQXlEakQsRUFBRVUsRUFBRSxFQUFFQSxFQUFFd0MsVUFBVUMsT0FBT3pDLElBQUl1QyxHQUFHLFdBQVdHLG1CQUFtQkYsVUFBVXhDLElBQUksTUFBTSx5QkFBeUJWLEVBQUUsV0FBV2lELEVBQUUsaUhBQy9QLElBQUlJLEVBQUUsQ0FBQ0MsVUFBVSxXQUFXLE9BQU0sR0FBSUMsbUJBQW1CLGFBQWFDLG9CQUFvQixhQUFhQyxnQkFBZ0IsY0FBY0MsRUFBRSxHQUFHLFNBQVNDLEVBQUUzRCxFQUFFaUQsRUFBRXZDLEdBQUdrRCxLQUFLQyxNQUFNN0QsRUFBRTRELEtBQUtFLFFBQVFiLEVBQUVXLEtBQUtHLEtBQUtMLEVBQUVFLEtBQUtJLFFBQVF0RCxHQUFHMkMsRUFDcE4sU0FBU1ksS0FBNkIsU0FBU0MsRUFBRWxFLEVBQUVpRCxFQUFFdkMsR0FBR2tELEtBQUtDLE1BQU03RCxFQUFFNEQsS0FBS0UsUUFBUWIsRUFBRVcsS0FBS0csS0FBS0wsRUFBRUUsS0FBS0ksUUFBUXRELEdBQUcyQyxFQURzR00sRUFBRTFCLFVBQVVrQyxpQkFBaUIsR0FBR1IsRUFBRTFCLFVBQVVtQyxTQUFTLFNBQVNwRSxFQUFFaUQsR0FBRyxHQUFHLGlCQUFrQmpELEdBQUcsbUJBQW9CQSxHQUFHLE1BQU1BLEVBQUUsTUFBTXFFLE1BQU1yQixFQUFFLEtBQUtZLEtBQUtJLFFBQVFQLGdCQUFnQkcsS0FBSzVELEVBQUVpRCxFQUFFLGFBQWFVLEVBQUUxQixVQUFVcUMsWUFBWSxTQUFTdEUsR0FBRzRELEtBQUtJLFFBQVFULG1CQUFtQkssS0FBSzVELEVBQUUsZ0JBQ25kaUUsRUFBRWhDLFVBQVUwQixFQUFFMUIsVUFBc0YsSUFBSXNDLEVBQUVMLEVBQUVqQyxVQUFVLElBQUlnQyxFQUFFTSxFQUFFQyxZQUFZTixFQUFFNUQsRUFBRWlFLEVBQUVaLEVBQUUxQixXQUFXc0MsRUFBRUUsc0JBQXFCLEVBQUcsSUFBSUMsRUFBRSxDQUFDQyxRQUFRLE1BQU1DLEVBQUU3RCxPQUFPa0IsVUFBVUMsZUFBZTJDLEVBQUUsQ0FBQ2pELEtBQUksRUFBR2tELEtBQUksRUFBR0MsUUFBTyxFQUFHQyxVQUFTLEdBQ2hTLFNBQVNDLEVBQUVqRixFQUFFaUQsRUFBRXZDLEdBQUcsSUFBSXdFLEVBQUV2RSxFQUFFLEdBQUd3RSxFQUFFLEtBQUtDLEVBQUUsS0FBSyxHQUFHLE1BQU1uQyxFQUFFLElBQUlpQyxVQUFLLElBQVNqQyxFQUFFNkIsTUFBTU0sRUFBRW5DLEVBQUU2QixVQUFLLElBQVM3QixFQUFFckIsTUFBTXVELEVBQUUsR0FBR2xDLEVBQUVyQixLQUFLcUIsRUFBRTJCLEVBQUVwRSxLQUFLeUMsRUFBRWlDLEtBQUtMLEVBQUUzQyxlQUFlZ0QsS0FBS3ZFLEVBQUV1RSxHQUFHakMsRUFBRWlDLElBQUksSUFBSUcsRUFBRW5DLFVBQVVDLE9BQU8sRUFBRSxHQUFHLElBQUlrQyxFQUFFMUUsRUFBRTJFLFNBQVM1RSxPQUFPLEdBQUcsRUFBRTJFLEVBQUUsQ0FBQyxJQUFJLElBQUlFLEVBQUVDLE1BQU1ILEdBQUc1RSxFQUFFLEVBQUVBLEVBQUU0RSxFQUFFNUUsSUFBSThFLEVBQUU5RSxHQUFHeUMsVUFBVXpDLEVBQUUsR0FBR0UsRUFBRTJFLFNBQVNDLEVBQUUsR0FBR3ZGLEdBQUdBLEVBQUV5RixhQUFhLElBQUlQLEtBQUtHLEVBQUVyRixFQUFFeUYsa0JBQWUsSUFBUzlFLEVBQUV1RSxLQUFLdkUsRUFBRXVFLEdBQUdHLEVBQUVILElBQUksTUFBTSxDQUFDUSxTQUFTdkQsRUFBRXdELEtBQUszRixFQUFFNEIsSUFBSXVELEVBQUVMLElBQUlNLEVBQUV2QixNQUFNbEQsRUFBRWlGLE9BQU9sQixFQUFFQyxTQUN4VSxTQUFTa0IsRUFBRTdGLEdBQUcsTUFBTSxpQkFBa0JBLEdBQUcsT0FBT0EsR0FBR0EsRUFBRTBGLFdBQVd2RCxFQUEwRyxJQUFJMkQsRUFBRSxPQUFPQyxFQUFFLEdBQUcsU0FBU0MsRUFBRWhHLEVBQUVpRCxFQUFFdkMsRUFBRXdFLEdBQUcsR0FBR2EsRUFBRTVDLE9BQU8sQ0FBQyxJQUFJeEMsRUFBRW9GLEVBQUVFLE1BQThELE9BQXhEdEYsRUFBRXVGLE9BQU9sRyxFQUFFVyxFQUFFd0YsVUFBVWxELEVBQUV0QyxFQUFFeUYsS0FBSzFGLEVBQUVDLEVBQUVtRCxRQUFRb0IsRUFBRXZFLEVBQUUwRixNQUFNLEVBQVMxRixFQUFFLE1BQU0sQ0FBQ3VGLE9BQU9sRyxFQUFFbUcsVUFBVWxELEVBQUVtRCxLQUFLMUYsRUFBRW9ELFFBQVFvQixFQUFFbUIsTUFBTSxHQUM1YixTQUFTQyxFQUFFdEcsR0FBR0EsRUFBRWtHLE9BQU8sS0FBS2xHLEVBQUVtRyxVQUFVLEtBQUtuRyxFQUFFb0csS0FBSyxLQUFLcEcsRUFBRThELFFBQVEsS0FBSzlELEVBQUVxRyxNQUFNLEVBQUUsR0FBR04sRUFBRTVDLFFBQVE0QyxFQUFFUSxLQUFLdkcsR0FFMkYsU0FBU3dHLEVBQUV4RyxFQUFFaUQsRUFBRXZDLEdBQUcsT0FBTyxNQUFNVixFQUFFLEVBRGxPLFNBQVN5RyxFQUFFekcsRUFBRWlELEVBQUV2QyxFQUFFd0UsR0FBRyxJQUFJdkUsU0FBU1gsRUFBSyxjQUFjVyxHQUFHLFlBQVlBLElBQUVYLEVBQUUsTUFBSyxJQUFJbUYsR0FBRSxFQUFHLEdBQUcsT0FBT25GLEVBQUVtRixHQUFFLE9BQVEsT0FBT3hFLEdBQUcsSUFBSyxTQUFTLElBQUssU0FBU3dFLEdBQUUsRUFBRyxNQUFNLElBQUssU0FBUyxPQUFPbkYsRUFBRTBGLFVBQVUsS0FBS3ZELEVBQUUsS0FBS0csRUFBRTZDLEdBQUUsR0FBSSxHQUFHQSxFQUFFLE9BQU96RSxFQUFFd0UsRUFBRWxGLEVBQUUsS0FBS2lELEVBQUUsSUFBSXlELEVBQUUxRyxFQUFFLEdBQUdpRCxHQUFHLEVBQXlCLEdBQXZCa0MsRUFBRSxFQUFFbEMsRUFBRSxLQUFLQSxFQUFFLElBQUlBLEVBQUUsSUFBT3VDLE1BQU1tQixRQUFRM0csR0FBRyxJQUFJLElBQUlvRixFQUFFLEVBQUVBLEVBQUVwRixFQUFFbUQsT0FBT2lDLElBQUksQ0FBUSxJQUFJQyxFQUFFcEMsRUFBRXlELEVBQWYvRixFQUFFWCxFQUFFb0YsR0FBZUEsR0FBR0QsR0FBR3NCLEVBQUU5RixFQUFFMEUsRUFBRTNFLEVBQUV3RSxRQUFRLEdBQUcsT0FBT2xGLEdBQUcsaUJBQWtCQSxFQUFFcUYsRUFBRSxLQUFpQ0EsRUFBRSxtQkFBN0JBLEVBQUV2QyxHQUFHOUMsRUFBRThDLElBQUk5QyxFQUFFLGVBQXNDcUYsRUFBRSxLQUFNLG1CQUFvQkEsRUFBRSxJQUFJckYsRUFBRXFGLEVBQUU3RSxLQUFLUixHQUFHb0YsRUFDcGYsSUFBSXpFLEVBQUVYLEVBQUU0RyxRQUFRQyxNQUE2QjFCLEdBQUdzQixFQUExQjlGLEVBQUVBLEVBQUVXLE1BQU0rRCxFQUFFcEMsRUFBRXlELEVBQUUvRixFQUFFeUUsS0FBYzFFLEVBQUV3RSxRQUFRLEdBQUcsV0FBV3ZFLEVBQUUsTUFBTUQsRUFBRSxHQUFHVixFQUFFcUUsTUFBTXJCLEVBQUUsR0FBRyxvQkFBb0J0QyxFQUFFLHFCQUFxQkssT0FBTytGLEtBQUs5RyxHQUFHK0csS0FBSyxNQUFNLElBQUlyRyxFQUFFLEtBQUssT0FBT3lFLEVBQXFDc0IsQ0FBRXpHLEVBQUUsR0FBR2lELEVBQUV2QyxHQUFHLFNBQVNnRyxFQUFFMUcsRUFBRWlELEdBQUcsTUFBTSxpQkFBa0JqRCxHQUFHLE9BQU9BLEdBQUcsTUFBTUEsRUFBRTRCLElBSDlJLFNBQWdCNUIsR0FBRyxJQUFJaUQsRUFBRSxDQUFDLElBQUksS0FBSyxJQUFJLE1BQU0sTUFBTSxLQUFLLEdBQUdqRCxHQUFHZ0gsUUFBUSxTQUFRLFNBQVNoSCxHQUFHLE9BQU9pRCxFQUFFakQsTUFHK0NpSCxDQUFPakgsRUFBRTRCLEtBQUtxQixFQUFFaUUsU0FBUyxJQUFJLFNBQVNDLEVBQUVuSCxFQUFFaUQsR0FBR2pELEVBQUVvRyxLQUFLNUYsS0FBS1IsRUFBRThELFFBQVFiLEVBQUVqRCxFQUFFcUcsU0FDeFgsU0FBU2UsRUFBR3BILEVBQUVpRCxFQUFFdkMsR0FBRyxJQUFJd0UsRUFBRWxGLEVBQUVrRyxPQUFPdkYsRUFBRVgsRUFBRW1HLFVBQVVuRyxFQUFFQSxFQUFFb0csS0FBSzVGLEtBQUtSLEVBQUU4RCxRQUFRYixFQUFFakQsRUFBRXFHLFNBQVNiLE1BQU1tQixRQUFRM0csR0FBR3FILEVBQUVySCxFQUFFa0YsRUFBRXhFLEdBQUUsU0FBU1YsR0FBRyxPQUFPQSxLQUFJLE1BQU1BLElBQUk2RixFQUFFN0YsS0FBS0EsRUFKdEosU0FBV0EsRUFBRWlELEdBQUcsTUFBTSxDQUFDeUMsU0FBU3ZELEVBQUV3RCxLQUFLM0YsRUFBRTJGLEtBQUsvRCxJQUFJcUIsRUFBRTZCLElBQUk5RSxFQUFFOEUsSUFBSWpCLE1BQU03RCxFQUFFNkQsTUFBTStCLE9BQU81RixFQUFFNEYsUUFJbUUwQixDQUFFdEgsRUFBRVcsSUFBSVgsRUFBRTRCLEtBQUtxQixHQUFHQSxFQUFFckIsTUFBTTVCLEVBQUU0QixJQUFJLElBQUksR0FBRzVCLEVBQUU0QixLQUFLb0YsUUFBUWxCLEVBQUUsT0FBTyxLQUFLcEYsSUFBSXdFLEVBQUVxQixLQUFLdkcsSUFBSSxTQUFTcUgsRUFBRXJILEVBQUVpRCxFQUFFdkMsRUFBRXdFLEVBQUV2RSxHQUFHLElBQUl3RSxFQUFFLEdBQUcsTUFBTXpFLElBQUl5RSxHQUFHLEdBQUd6RSxHQUFHc0csUUFBUWxCLEVBQUUsT0FBTyxLQUFrQlUsRUFBRXhHLEVBQUVvSCxFQUFqQm5FLEVBQUUrQyxFQUFFL0MsRUFBRWtDLEVBQUVELEVBQUV2RSxJQUFhMkYsRUFBRXJELEdBQUcsSUFBSXNFLEVBQUUsQ0FBQzVDLFFBQVEsTUFBTSxTQUFTNkMsSUFBSSxJQUFJeEgsRUFBRXVILEVBQUU1QyxRQUFRLEdBQUcsT0FBTzNFLEVBQUUsTUFBTXFFLE1BQU1yQixFQUFFLE1BQU0sT0FBT2hELEVBQ3hhLElBQUl5SCxFQUFHLENBQUNDLHVCQUF1QkgsRUFBRUksd0JBQXdCLENBQUNDLFNBQVMsTUFBTUMsa0JBQWtCbkQsRUFBRW9ELHFCQUFxQixDQUFDbkQsU0FBUSxHQUFJb0QsT0FBT3pILEdBQUdWLEVBQVFvSSxTQUFTLENBQUNDLElBQUksU0FBU2pJLEVBQUVpRCxFQUFFdkMsR0FBRyxHQUFHLE1BQU1WLEVBQUUsT0FBT0EsRUFBRSxJQUFJa0YsRUFBRSxHQUFtQixPQUFoQm1DLEVBQUVySCxFQUFFa0YsRUFBRSxLQUFLakMsRUFBRXZDLEdBQVV3RSxHQUFHZ0QsUUFBUSxTQUFTbEksRUFBRWlELEVBQUV2QyxHQUFHLEdBQUcsTUFBTVYsRUFBRSxPQUFPQSxFQUFxQndHLEVBQUV4RyxFQUFFbUgsRUFBdkJsRSxFQUFFK0MsRUFBRSxLQUFLLEtBQUsvQyxFQUFFdkMsSUFBWTRGLEVBQUVyRCxJQUFJb0QsTUFBTSxTQUFTckcsR0FBRyxPQUFPd0csRUFBRXhHLEdBQUUsV0FBVyxPQUFPLE9BQU0sT0FBT21JLFFBQVEsU0FBU25JLEdBQUcsSUFBSWlELEVBQUUsR0FBcUMsT0FBbENvRSxFQUFFckgsRUFBRWlELEVBQUUsTUFBSyxTQUFTakQsR0FBRyxPQUFPQSxLQUFXaUQsR0FBR21GLEtBQUssU0FBU3BJLEdBQUcsSUFBSTZGLEVBQUU3RixHQUFHLE1BQU1xRSxNQUFNckIsRUFBRSxNQUFNLE9BQU9oRCxJQUM5ZUosRUFBUXlJLFVBQVUxRSxFQUFFL0QsRUFBUTBJLFNBQVNuSCxFQUFFdkIsRUFBUTJJLFNBQVNoRyxFQUFFM0MsRUFBUTRJLGNBQWN0RSxFQUFFdEUsRUFBUTZJLFdBQVdsSCxFQUFFM0IsRUFBUThJLFNBQVMvRixFQUFFL0MsRUFBUStJLG1EQUFtRGxCLEVBQ3JMN0gsRUFBUWdKLGFBQWEsU0FBUzVJLEVBQUVpRCxFQUFFdkMsR0FBRyxHQUFHLE1BQU9WLEVBQWMsTUFBTXFFLE1BQU1yQixFQUFFLElBQUloRCxJQUFJLElBQUlrRixFQUFFNUUsRUFBRSxHQUFHTixFQUFFNkQsT0FBT2xELEVBQUVYLEVBQUU0QixJQUFJdUQsRUFBRW5GLEVBQUU4RSxJQUFJTSxFQUFFcEYsRUFBRTRGLE9BQU8sR0FBRyxNQUFNM0MsRUFBRSxDQUFvRSxRQUFuRSxJQUFTQSxFQUFFNkIsTUFBTUssRUFBRWxDLEVBQUU2QixJQUFJTSxFQUFFVixFQUFFQyxjQUFTLElBQVMxQixFQUFFckIsTUFBTWpCLEVBQUUsR0FBR3NDLEVBQUVyQixLQUFRNUIsRUFBRTJGLE1BQU0zRixFQUFFMkYsS0FBS0YsYUFBYSxJQUFJSixFQUFFckYsRUFBRTJGLEtBQUtGLGFBQWEsSUFBSUYsS0FBS3RDLEVBQUUyQixFQUFFcEUsS0FBS3lDLEVBQUVzQyxLQUFLVixFQUFFM0MsZUFBZXFELEtBQUtMLEVBQUVLLFFBQUcsSUFBU3RDLEVBQUVzQyxTQUFJLElBQVNGLEVBQUVBLEVBQUVFLEdBQUd0QyxFQUFFc0MsSUFBSSxJQUFJQSxFQUFFckMsVUFBVUMsT0FBTyxFQUFFLEdBQUcsSUFBSW9DLEVBQUVMLEVBQUVJLFNBQVM1RSxPQUFPLEdBQUcsRUFBRTZFLEVBQUUsQ0FBQ0YsRUFBRUcsTUFBTUQsR0FBRyxJQUFJLElBQUk5RSxFQUFFLEVBQUVBLEVBQUU4RSxFQUFFOUUsSUFBSTRFLEVBQUU1RSxHQUFHeUMsVUFBVXpDLEVBQUUsR0FBR3lFLEVBQUVJLFNBQVNELEVBQUUsTUFBTSxDQUFDSyxTQUFTdkQsRUFBRXdELEtBQUszRixFQUFFMkYsS0FDeGYvRCxJQUFJakIsRUFBRW1FLElBQUlLLEVBQUV0QixNQUFNcUIsRUFBRVUsT0FBT1IsSUFBSXhGLEVBQVFpSixjQUFjLFNBQVM3SSxFQUFFaUQsR0FBOEssWUFBM0ssSUFBU0EsSUFBSUEsRUFBRSxPQUFNakQsRUFBRSxDQUFDMEYsU0FBU2pELEVBQUVxRyxzQkFBc0I3RixFQUFFOEYsY0FBYy9JLEVBQUVnSixlQUFlaEosRUFBRWlKLGFBQWEsRUFBRUMsU0FBUyxLQUFLQyxTQUFTLE9BQVFELFNBQVMsQ0FBQ3hELFNBQVNsRCxFQUFFNEcsU0FBU3BKLEdBQVVBLEVBQUVtSixTQUFTbkosR0FBR0osRUFBUXlKLGNBQWNwRSxFQUFFckYsRUFBUTBKLGNBQWMsU0FBU3RKLEdBQUcsSUFBSWlELEVBQUVnQyxFQUFFcEQsS0FBSyxLQUFLN0IsR0FBWSxPQUFUaUQsRUFBRTBDLEtBQUszRixFQUFTaUQsR0FBR3JELEVBQVEySixVQUFVLFdBQVcsTUFBTSxDQUFDNUUsUUFBUSxPQUFPL0UsRUFBUTRKLFdBQVcsU0FBU3hKLEdBQUcsTUFBTSxDQUFDMEYsU0FBU2hELEVBQUUrRyxPQUFPekosSUFBSUosRUFBUThKLGVBQWU3RCxFQUMzZWpHLEVBQVErSixLQUFLLFNBQVMzSixHQUFHLE1BQU0sQ0FBQzBGLFNBQVM3QyxFQUFFK0csTUFBTTVKLEVBQUU2SixTQUFTLEVBQUVDLFFBQVEsT0FBT2xLLEVBQVFtSyxLQUFLLFNBQVMvSixFQUFFaUQsR0FBRyxNQUFNLENBQUN5QyxTQUFTOUMsRUFBRStDLEtBQUszRixFQUFFZ0ssYUFBUSxJQUFTL0csRUFBRSxLQUFLQSxJQUFJckQsRUFBUXFLLFlBQVksU0FBU2pLLEVBQUVpRCxHQUFHLE9BQU91RSxJQUFJeUMsWUFBWWpLLEVBQUVpRCxJQUFJckQsRUFBUXNLLFdBQVcsU0FBU2xLLEVBQUVpRCxHQUFHLE9BQU91RSxJQUFJMEMsV0FBV2xLLEVBQUVpRCxJQUFJckQsRUFBUXVLLGNBQWMsYUFBYXZLLEVBQVF3SyxVQUFVLFNBQVNwSyxFQUFFaUQsR0FBRyxPQUFPdUUsSUFBSTRDLFVBQVVwSyxFQUFFaUQsSUFBSXJELEVBQVF5SyxvQkFBb0IsU0FBU3JLLEVBQUVpRCxFQUFFdkMsR0FBRyxPQUFPOEcsSUFBSTZDLG9CQUFvQnJLLEVBQUVpRCxFQUFFdkMsSUFDdGNkLEVBQVEwSyxnQkFBZ0IsU0FBU3RLLEVBQUVpRCxHQUFHLE9BQU91RSxJQUFJOEMsZ0JBQWdCdEssRUFBRWlELElBQUlyRCxFQUFRMkssUUFBUSxTQUFTdkssRUFBRWlELEdBQUcsT0FBT3VFLElBQUkrQyxRQUFRdkssRUFBRWlELElBQUlyRCxFQUFRNEssV0FBVyxTQUFTeEssRUFBRWlELEVBQUV2QyxHQUFHLE9BQU84RyxJQUFJZ0QsV0FBV3hLLEVBQUVpRCxFQUFFdkMsSUFBSWQsRUFBUTZLLE9BQU8sU0FBU3pLLEdBQUcsT0FBT3dILElBQUlpRCxPQUFPekssSUFBSUosRUFBUThLLFNBQVMsU0FBUzFLLEdBQUcsT0FBT3dILElBQUlrRCxTQUFTMUssSUFBSUosRUFBUStLLFFBQVEsVzs7Ozs7RUNoQnJULElBQUlDLEVBQXdCN0osT0FBTzZKLHNCQUMvQjFJLEVBQWlCbkIsT0FBT2tCLFVBQVVDLGVBQ2xDMkksRUFBbUI5SixPQUFPa0IsVUFBVTZJLHFCQUV4QyxTQUFTQyxFQUFTQyxHQUNqQixHQUFJQSxRQUNILE1BQU0sSUFBSUMsVUFBVSx5REFHckIsT0FBT2xLLE9BQU9pSyxHQStDZm5MLEVBQU9ELFFBNUNQLFdBQ0MsSUFDQyxJQUFLbUIsT0FBT2dILE9BQ1gsT0FBTyxFQU1SLElBQUltRCxFQUFRLElBQUlDLE9BQU8sT0FFdkIsR0FEQUQsRUFBTSxHQUFLLEtBQ2tDLE1BQXpDbkssT0FBT3FLLG9CQUFvQkYsR0FBTyxHQUNyQyxPQUFPLEVBS1IsSUFEQSxJQUFJRyxFQUFRLEdBQ0hwTCxFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFDdkJvTCxFQUFNLElBQU1GLE9BQU9HLGFBQWFyTCxJQUFNQSxFQUt2QyxHQUF3QixlQUhYYyxPQUFPcUssb0JBQW9CQyxHQUFPcEQsS0FBSSxTQUFVbkcsR0FDNUQsT0FBT3VKLEVBQU12SixNQUVIaUYsS0FBSyxJQUNmLE9BQU8sRUFJUixJQUFJd0UsRUFBUSxHQUlaLE1BSEEsdUJBQXVCQyxNQUFNLElBQUl0RCxTQUFRLFNBQVV1RCxHQUNsREYsRUFBTUUsR0FBVUEsS0FHZix5QkFERTFLLE9BQU8rRixLQUFLL0YsT0FBT2dILE9BQU8sR0FBSXdELElBQVF4RSxLQUFLLElBTTlDLE1BQU8yRSxHQUVSLE9BQU8sR0FJUUMsR0FBb0I1SyxPQUFPZ0gsT0FBUyxTQUFVNkQsRUFBUUMsR0FLdEUsSUFKQSxJQUFJQyxFQUVBQyxFQURBQyxFQUFLakIsRUFBU2EsR0FHVHhKLEVBQUksRUFBR0EsRUFBSWMsVUFBVUMsT0FBUWYsSUFBSyxDQUcxQyxJQUFLLElBQUlSLEtBRlRrSyxFQUFPL0ssT0FBT21DLFVBQVVkLElBR25CRixFQUFlMUIsS0FBS3NMLEVBQU1sSyxLQUM3Qm9LLEVBQUdwSyxHQUFPa0ssRUFBS2xLLElBSWpCLEdBQUlnSixFQUF1QixDQUMxQm1CLEVBQVVuQixFQUFzQmtCLEdBQ2hDLElBQUssSUFBSTdMLEVBQUksRUFBR0EsRUFBSThMLEVBQVE1SSxPQUFRbEQsSUFDL0I0SyxFQUFpQnJLLEtBQUtzTCxFQUFNQyxFQUFROUwsTUFDdkMrTCxFQUFHRCxFQUFROUwsSUFBTTZMLEVBQUtDLEVBQVE5TCxNQU1sQyxPQUFPK0wsSSw2eEJDdkZSLElBTU1DLEUsWUFDSixXQUFZcEksR0FBTyxNLElBQUEsTyw0RkFBQSxTLEVBQ2pCLFUsRUFBQSxlQUFNQSxLLDhDQUVEQSxNQUFRQSxFQUNiLEVBQUtxSSxnQkFBa0IsRUFBS3JJLE1BQU1xSSxnQkFDbEMsRUFBS0MsZUFBaUIsRUFBS3RJLE1BQU1zSSxlQUNqQyxFQUFLQyxlQUFpQkMsT0FBTyxFQUFLeEksTUFBTXVJLGlCQUFtQixJQUMzRCxFQUFLRSxpQkFBbUQsU0FBaEMsRUFBS3pJLE1BQU15SSxpQkFDbkMsRUFBS0MsT0FBUyxFQUFLMUksTUFBTTBJLFFBQVUsRUFFbkMsRUFBS0MsU0FBVyxFQUFLQSxTQUFTM0ssS0FBZCxTQUViLEVBQUtnQyxNQUFNNEksUUFBZ0MsZUFBdEIsRUFBSzVJLE1BQU00SSxRQUNqQyxFQUFLQyxnQkFBa0IsS0FDdkIsRUFBS0MsZUFBaUIsUUFFdEIsRUFBS0QsZ0JBQWtCLElBQ3ZCLEVBQUtDLGVBQWlCLEtBakJQLEUsa1NBeUJSLElBQ0xDLEVBREssT0FFVGhKLEtBQUtzSSxnQkFBZ0JoRSxTQUFRLFNBQUMyRSxFQUFXQyxHQUNsQ0MsU0FBU0MsZUFBZUgsSUFLN0JELEVBQXlCRyxTQUFTQyxlQUFlSCxHQUFXSSxXQUFhLEVBQUtYLGlCQUFtQlMsU0FBU0csY0FBYyx3QkFBd0JDLGFBQWUsR0FFM0pqTixPQUFPa04sWUFBYyxFQUFLYixRQUFVSyxHQUEwQjFNLE9BQU9rTixZQUFjUixFQUF5QkcsU0FBU0MsZUFBZUgsR0FBV00sY0FDakosRUFBS0Usa0JBQWtCUixHQUFXUyxVQUFVQyxJQUFJLEVBQUtwQixnQkFDckQsRUFBS3FCLDZCQUE2QlgsSUFFbEMsRUFBS1Esa0JBQWtCUixHQUFXUyxVQUFVRyxPQUFPLEVBQUt0QixnQkFHdERqTSxPQUFPd04sWUFBY3hOLE9BQU9rTixhQUFlTCxTQUFTWSxLQUFLUixjQUFnQkwsSUFBVSxFQUFLWixnQkFBZ0IvSSxPQUFTLElBQ25ILEVBQUtrSyxrQkFBa0JSLEdBQVdTLFVBQVVDLElBQUksRUFBS3BCLGdCQUNyRCxFQUFLcUIsNkJBQTZCWCxLQWZsQ2UsUUFBUUMsS0FBUixVQXBDd0Isc0JBb0N4QixnQ0FBK0RoQixFQUEvRCw2QixvQ0FvQlFpQixFQUFjQyxFQUFPQyxFQUFRQyxHQUV2QyxPQURBSCxHQUFnQkcsRUFBUyxHQUNOLEVBQVVELEVBQU8sRUFBRUYsRUFBYUEsRUFBZUMsR0FFMURDLEVBQU8sS0FEZkYsR0FDa0NBLEVBQWEsR0FBSyxHQUFLQyxJLCtCQVNwREEsRUFBTy9CLEVBQUlpQyxHQUFVLFdBQ3hCRCxFQUFTaEMsRUFBSytCLEVBQ2RHLEVBQWMsR0FHRSxTQUFoQkMsSUFDQUQsR0FIWSxHQUlaLElBQUlsRCxFQUFNLEVBQUtvRCxjQUFjRixFQUFhSCxFQUFPQyxFQUFRQyxHQUN6RC9OLE9BQU9tTyxTQUFTLEVBQUdyRCxHQUNoQmtELEVBQWNELEdBQ2JLLFdBQVdILEVBUEgsSUFXaEJBLEssd0NBT2dCdEIsR0FDaEIsT0FBT0UsU0FBU0csY0FBVCxrQkFBa0N0SixLQUFLK0ksZ0JBQXZDLE9BQXdERSxFQUF4RCxTLHdDQU9TMEIsR0FDaEIsT0FBT0EsRUFBUUMsU0FBUzVLLEtBQUsrSSxnQkFBa0I0QixFQUFRdkgsUUFBUXBELEtBQUsrSSxlQUFnQixJQUFNLEssbURBTy9EOEIsR0FBa0IsV0FDN0M3SyxLQUFLc0ksZ0JBQWdCakUsS0FBSSxTQUFDNEUsRUFBV0MsR0FDL0JELElBQWM0QixHQUNoQixFQUFLcEIsa0JBQWtCUixHQUFXUyxVQUFVRyxPQUFPLEVBQUt0QixxQiwwQ0FLMUMsV0FDZFksU0FBU0csY0FBVCxrQkFBa0N0SixLQUFLOEksZ0JBQXZDLFNBQ0ZLLFNBQVNHLGNBQVQsa0JBQWtDdEosS0FBSzhJLGdCQUF2QyxRQUE2RGdDLGlCQUFpQixTQUFTLFNBQUNDLEdBQ3RGQSxFQUFNQyxpQkFDTixFQUFLUCxTQUFTbk8sT0FBT2tOLFlBQWEsRUFBRyxFQUFLaEIsZ0JBQzFDbE0sT0FBTzJPLFNBQVNDLEtBQU8sTUFJM0IvQixTQUFTRyxjQUFjLHdCQUF3QjZCLGlCQUFpQixLQUFLN0csU0FBUyxTQUFDOEcsR0FDN0VBLEVBQVFOLGlCQUFpQixTQUFTLFNBQUNDLEdBQ2pDQSxFQUFNQyxpQkFDTixJQUFJL0IsRUFBWSxFQUFLb0Msa0JBQWtCRCxFQUFRRSxhQUFhLFNBRTVELEdBQUdyQyxFQUNELEdBQUlFLFNBQVNDLGVBQWVILEdBQVksQ0FDdEMsSUFBSXNDLEVBQXVCcEMsU0FBU0MsZUFBZUgsR0FBV0ksV0FBYSxFQUFLWCxpQkFBbUJTLFNBQVNHLGNBQWMsd0JBQXdCQyxhQUFlLEdBQ2pLLEVBQUtrQixTQUFTbk8sT0FBT2tOLFlBQWErQixFQUF1QixFQUFLNUMsT0FBUSxFQUFLSCxxQkFFM0V3QixRQUFRQyxLQUFSLFVBcklvQixzQkFxSXBCLGdDQUErRGhCLEVBQS9ELDZCQUdGLEVBQUt3QixTQUFTbk8sT0FBT2tOLFlBQWEsRUFBRyxFQUFLaEIsc0JBS2hEbE0sT0FBT3dPLGlCQUFpQixTQUFVOUssS0FBSzRJLFksNkNBSXZDdE0sT0FBT2tQLG9CQUFvQixTQUFVeEwsS0FBSzRJLFksK0JBSTFDLE9BQ0UseUJBQUs2QyxXQUFTLFFBQ1Z6TCxLQUFLQyxNQUFNeUIsZSw4QkFqSk0rQyxhQXVKWjREIiwiZmlsZSI6IlNjcm9sbHNweU5hdi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSB7XG5cdFx0dmFyIGEgPSBmYWN0b3J5KCk7XG5cdFx0Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBleHBvcnRzIDogcm9vdClbaV0gPSBhW2ldO1xuXHR9XG59KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMjIpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHo9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxBPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6XG42MDExNixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEU9e307ZnVuY3Rpb24gRihhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfUYucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Ri5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKEMoODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRygpe31HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2woSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsYyl7dmFyIGUsZD17fSxnPW51bGwsaz1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihrPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixlKSYmIUwuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaD1BcnJheShmKSxtPTA7bTxmO20rKyloW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49aH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtlXSYmKGRbZV09ZltlXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjprLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZyxRPVtdO2Z1bmN0aW9uIFIoYSxiLGMsZSl7aWYoUS5sZW5ndGgpe3ZhciBkPVEucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1jO2QuY29udGV4dD1lO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpjLGNvbnRleHQ6ZSxjb3VudDowfX1cbmZ1bmN0aW9uIFMoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5RLmxlbmd0aCYmUS5wdXNoKGEpfVxuZnVuY3Rpb24gVChhLGIsYyxlKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gYyhlLGEsXCJcIj09PWI/XCIuXCIrVShhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaz0wO2s8YS5sZW5ndGg7aysrKXtkPWFba107dmFyIGY9YitVKGQsayk7Zys9VChkLGYsYyxlKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaz1cbjA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1UoZCxrKyspLGcrPVQoZCxmLGMsZSk7ZWxzZSBpZihcIm9iamVjdFwiPT09ZCl0aHJvdyBjPVwiXCIrYSxFcnJvcihDKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1jP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmMsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFYoYSxiLGMpe3JldHVybiBudWxsPT1hPzA6VChhLFwiXCIsYixjKX1mdW5jdGlvbiBVKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBXKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGFhKGEsYixjKXt2YXIgZT1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1goYSxlLGMsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTyhhKSYmKGE9TihhLGQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2MpKSxlLnB1c2goYSkpfWZ1bmN0aW9uIFgoYSxiLGMsZSxkKXt2YXIgZz1cIlwiO251bGwhPWMmJihnPShcIlwiK2MpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIik7Yj1SKGIsZyxlLGQpO1YoYSxhYSxiKTtTKGIpfXZhciBZPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFooKXt2YXIgYT1ZLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoQygzMjEpKTtyZXR1cm4gYX1cbnZhciBiYT17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpZLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOntzdXNwZW5zZTpudWxsfSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07ZXhwb3J0cy5DaGlsZHJlbj17bWFwOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdO1goYSxlLG51bGwsYixjKTtyZXR1cm4gZX0sZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVIobnVsbCxudWxsLGIsYyk7VihhLFcsYik7UyhiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFYoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtYKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoQygxNDMpKTtyZXR1cm4gYX19O1xuZXhwb3J0cy5Db21wb25lbnQ9RjtleHBvcnRzLkZyYWdtZW50PXI7ZXhwb3J0cy5Qcm9maWxlcj11O2V4cG9ydHMuUHVyZUNvbXBvbmVudD1IO2V4cG9ydHMuU3RyaWN0TW9kZT10O2V4cG9ydHMuU3VzcGVuc2U9eTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWJhO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKEMoMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksZz1hLnJlZixrPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoZz1iLnJlZixrPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZj1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihoIGluIGIpSy5jYWxsKGIsaCkmJiFMLmhhc093blByb3BlcnR5KGgpJiYoZVtoXT12b2lkIDA9PT1iW2hdJiZ2b2lkIDAhPT1mP2ZbaF06YltoXSl9dmFyIGg9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1oKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8aCl7Zj1BcnJheShoKTtmb3IodmFyIG09MDttPGg7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1mfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmcscHJvcHM6ZSxfb3duZXI6a319O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eix0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTMuMVwiO1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5jb25zdCBTQ1JPTExTUFlfTkFWX05BTUVTUEFDRSA9IFwicmVhY3Qtc2Nyb2xsc3B5LW5hdlwiO1xuXG5cbi8qKlxuICogU2Nyb2xsc3B5TmF2IGNvbXBvbmVudC4gUmVmZXIgdG8gYmVsb3cgZm9yIHRoZSBwcm9wcyBpdCByZWNlaXZlc1xuICovXG5jbGFzcyBTY3JvbGxzcHlOYXYgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICB0aGlzLnNjcm9sbFRhcmdldElkcyA9IHRoaXMucHJvcHMuc2Nyb2xsVGFyZ2V0SWRzO1xuICAgIHRoaXMuYWN0aXZlTmF2Q2xhc3MgPSB0aGlzLnByb3BzLmFjdGl2ZU5hdkNsYXNzO1xuICAgIHRoaXMuc2Nyb2xsRHVyYXRpb24gPSBOdW1iZXIodGhpcy5wcm9wcy5zY3JvbGxEdXJhdGlvbikgfHwgMTAwMDtcbiAgICB0aGlzLmhlYWRlckJhY2tncm91bmQgPSB0aGlzLnByb3BzLmhlYWRlckJhY2tncm91bmQgPT09IFwidHJ1ZVwiID8gdHJ1ZSA6IGZhbHNlO1xuICAgIHRoaXMub2Zmc2V0ID0gdGhpcy5wcm9wcy5vZmZzZXQgfHwgMDtcblxuICAgIHRoaXMub25TY3JvbGwgPSB0aGlzLm9uU2Nyb2xsLmJpbmQodGhpcyk7XG5cbiAgICBpZih0aGlzLnByb3BzLnJvdXRlciAmJiB0aGlzLnByb3BzLnJvdXRlciA9PT0gXCJIYXNoUm91dGVyXCIpIHtcbiAgICAgIHRoaXMuaG9tZURlZmF1bHRMaW5rID0gXCIjL1wiO1xuICAgICAgdGhpcy5oYXNoSWRlbnRpZmllciA9IFwiIy8jXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaG9tZURlZmF1bHRMaW5rID0gXCIvXCI7XG4gICAgICB0aGlzLmhhc2hJZGVudGlmaWVyID0gXCIjXCI7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNjcm9sbCBldmVudCBoYW5kbGVyLiBJdCBjaGVja3MgdGhlIGN1cnJlbnQgd2luZG93IG9mZnNldCBhbmQgY29tcGFyZXMgaXQgd2l0aCB0aGUgcGFnZVlPZmZzZXQgb2YgZWFjaFxuICAgKiAgdGFyZ2V0IHNlY3Rpb25zLiBJdCBoaWdobGlnaHRzIHRoZSBuYXYgbGluayB3aGVuIHNjcm9sbGluZyB0byBhIGNvcnJlc3BvbmRpbmcgc2VjdGlvblxuICAgKi9cbiAgb25TY3JvbGwoKSB7XG4gICAgbGV0IHNjcm9sbFNlY3Rpb25PZmZzZXRUb3A7XG4gICAgdGhpcy5zY3JvbGxUYXJnZXRJZHMuZm9yRWFjaCgoc2VjdGlvbklELCBpbmRleCkgPT4ge1xuICAgICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzZWN0aW9uSUQpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgJHtTQ1JPTExTUFlfTkFWX05BTUVTUEFDRX06IG5vIGVsZW1lbnQgd2l0aCBpZCAke3NlY3Rpb25JRH0gcHJlc2VudCBpbiB0aGUgRE9NYCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2Nyb2xsU2VjdGlvbk9mZnNldFRvcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlY3Rpb25JRCkub2Zmc2V0VG9wIC0gKHRoaXMuaGVhZGVyQmFja2dyb3VuZCA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJkaXZbZGF0YS1uYXY9J2xpc3QnXVwiKS5zY3JvbGxIZWlnaHQgOiAwKTtcbiAgXG4gICAgICBpZiAod2luZG93LnBhZ2VZT2Zmc2V0IC0gdGhpcy5vZmZzZXQgPj0gc2Nyb2xsU2VjdGlvbk9mZnNldFRvcCAmJiB3aW5kb3cucGFnZVlPZmZzZXQgPCBzY3JvbGxTZWN0aW9uT2Zmc2V0VG9wICsgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VjdGlvbklEKS5zY3JvbGxIZWlnaHQpIHtcbiAgICAgICAgdGhpcy5nZXROYXZMaW5rRWxlbWVudChzZWN0aW9uSUQpLmNsYXNzTGlzdC5hZGQodGhpcy5hY3RpdmVOYXZDbGFzcyk7XG4gICAgICAgIHRoaXMuY2xlYXJPdGhlck5hdkxpbmtBY3RpdmVTdHlsZShzZWN0aW9uSUQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmdldE5hdkxpbmtFbGVtZW50KHNlY3Rpb25JRCkuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmFjdGl2ZU5hdkNsYXNzKTtcbiAgICAgIH1cbiAgXG4gICAgICBpZiAod2luZG93LmlubmVySGVpZ2h0ICsgd2luZG93LnBhZ2VZT2Zmc2V0ID49IGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0ICYmIGluZGV4ID09PSB0aGlzLnNjcm9sbFRhcmdldElkcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMuZ2V0TmF2TGlua0VsZW1lbnQoc2VjdGlvbklEKS5jbGFzc0xpc3QuYWRkKHRoaXMuYWN0aXZlTmF2Q2xhc3MpO1xuICAgICAgICB0aGlzLmNsZWFyT3RoZXJOYXZMaW5rQWN0aXZlU3R5bGUoc2VjdGlvbklEKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGVhc2VJbk91dFF1YWQoY3VycmVudF90aW1lLCBzdGFydCwgY2hhbmdlLCBkdXJhdGlvbikge1xuICAgICAgY3VycmVudF90aW1lIC89IGR1cmF0aW9uLzI7XG4gICAgICBpZiAoY3VycmVudF90aW1lIDwgMSkgcmV0dXJuIGNoYW5nZS8yKmN1cnJlbnRfdGltZSpjdXJyZW50X3RpbWUgKyBzdGFydDtcbiAgICAgIGN1cnJlbnRfdGltZS0tO1xuICAgICAgcmV0dXJuIC1jaGFuZ2UvMiAqIChjdXJyZW50X3RpbWUqKGN1cnJlbnRfdGltZS0yKSAtIDEpICsgc3RhcnQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gc2Nyb2xsIGFuaW1hdGlvbiB3aXRoIGdpdmVuIHN0YXJ0IHBsYWNlLCBlbmQgcGxhY2UgYW5kIGR1cmF0aW9uXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydFxuICAgKiBAcGFyYW0ge051bWJlcn0gdG9cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAqL1xuICBzY3JvbGxUbyhzdGFydCwgdG8sIGR1cmF0aW9uKSB7XG4gICAgbGV0IGNoYW5nZSA9IHRvIC0gc3RhcnQsXG4gICAgICAgIGN1cnJlbnRUaW1lID0gMCxcbiAgICAgICAgaW5jcmVtZW50ID0gMTA7XG5cbiAgICBsZXQgYW5pbWF0ZVNjcm9sbCA9ICgpID0+IHtcbiAgICAgICAgY3VycmVudFRpbWUgKz0gaW5jcmVtZW50O1xuICAgICAgICBsZXQgdmFsID0gdGhpcy5lYXNlSW5PdXRRdWFkKGN1cnJlbnRUaW1lLCBzdGFydCwgY2hhbmdlLCBkdXJhdGlvbik7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCB2YWwpO1xuICAgICAgICBpZihjdXJyZW50VGltZSA8IGR1cmF0aW9uKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGFuaW1hdGVTY3JvbGwsIGluY3JlbWVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgYW5pbWF0ZVNjcm9sbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmF2IGxpbmsgZWxlbWVudCB3aXRoIGEgZ2l2ZW4gc2VjdGlvbklEIHRoYXQgdGhlIG5hdiBsaW5rIGxpbmtzIHRvXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzZWN0aW9uSURcbiAgICovXG4gIGdldE5hdkxpbmtFbGVtZW50KHNlY3Rpb25JRCkge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBhW2hyZWY9JyR7dGhpcy5oYXNoSWRlbnRpZmllcn0ke3NlY3Rpb25JRH0nXWApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIGEgbmF2IGhyZWYgdXJsLCBnZXQgaXRzIGNsZWFuIHNlY3Rpb25JRCBiYXNlZCBvbiBpZiB0aGVyZSBpcyBoYXNoIHJvdXRlciBpZGVudGlmaWVyIG9yIG5vdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmF2SHJlZlxuICAgKi9cbiAgZ2V0TmF2VG9TZWN0aW9uSUQobmF2SHJlZikge1xuICAgIHJldHVybiBuYXZIcmVmLmluY2x1ZGVzKHRoaXMuaGFzaElkZW50aWZpZXIpID8gbmF2SHJlZi5yZXBsYWNlKHRoaXMuaGFzaElkZW50aWZpZXIsIFwiXCIpIDogXCJcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciB0aGUgaGlnaGxpZ2h0IHN0eWxlIG9uIHRoZSBub24tY3VycmVudCB2aWV3ZWQgbmF2IGVsZW1lbnRzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBleGNsdWRlU2VjdGlvbklEIFxuICAgKi9cbiAgY2xlYXJPdGhlck5hdkxpbmtBY3RpdmVTdHlsZShleGNsdWRlU2VjdGlvbklEKSB7XG4gICAgdGhpcy5zY3JvbGxUYXJnZXRJZHMubWFwKChzZWN0aW9uSUQsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoc2VjdGlvbklEICE9PSBleGNsdWRlU2VjdGlvbklEKSB7XG4gICAgICAgIHRoaXMuZ2V0TmF2TGlua0VsZW1lbnQoc2VjdGlvbklEKS5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuYWN0aXZlTmF2Q2xhc3MpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGFbaHJlZj0nJHt0aGlzLmhvbWVEZWZhdWx0TGlua30jJ11gKSkge1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYVtocmVmPScke3RoaXMuaG9tZURlZmF1bHRMaW5rfSMnXWApLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zY3JvbGxUbyh3aW5kb3cucGFnZVlPZmZzZXQsIDAsIHRoaXMuc2Nyb2xsRHVyYXRpb24pO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IFwiXCI7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiZGl2W2RhdGEtbmF2PSdsaXN0J11cIikucXVlcnlTZWxlY3RvckFsbChcImFcIikuZm9yRWFjaCggKG5hdkxpbmspID0+IHtcbiAgICAgIG5hdkxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsZXQgc2VjdGlvbklEID0gdGhpcy5nZXROYXZUb1NlY3Rpb25JRChuYXZMaW5rLmdldEF0dHJpYnV0ZShcImhyZWZcIikpO1xuXG4gICAgICAgIGlmKHNlY3Rpb25JRCkge1xuICAgICAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzZWN0aW9uSUQpKSB7XG4gICAgICAgICAgICBsZXQgc2Nyb2xsVGFyZ2V0UG9zaXRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzZWN0aW9uSUQpLm9mZnNldFRvcCAtICh0aGlzLmhlYWRlckJhY2tncm91bmQgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiZGl2W2RhdGEtbmF2PSdsaXN0J11cIikuc2Nyb2xsSGVpZ2h0IDogMCk7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbFRvKHdpbmRvdy5wYWdlWU9mZnNldCwgc2Nyb2xsVGFyZ2V0UG9zaXRpb24gKyB0aGlzLm9mZnNldCwgdGhpcy5zY3JvbGxEdXJhdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHtTQ1JPTExTUFlfTkFWX05BTUVTUEFDRX06IG5vIGVsZW1lbnQgd2l0aCBpZCAke3NlY3Rpb25JRH0gcHJlc2VudCBpbiB0aGUgRE9NYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2Nyb2xsVG8od2luZG93LnBhZ2VZT2Zmc2V0LCAwLCB0aGlzLnNjcm9sbER1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSlcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMub25TY3JvbGwpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vblNjcm9sbCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuKFxuICAgICAgPGRpdiBkYXRhLW5hdj1cImxpc3RcIj5cbiAgICAgICAgeyB0aGlzLnByb3BzLmNoaWxkcmVuIH1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2Nyb2xsc3B5TmF2O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==